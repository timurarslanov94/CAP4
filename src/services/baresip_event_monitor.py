"""
–ú–æ–Ω–∏—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π Baresip –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SIP —Å—Ç–∞—Ç—É—Å–æ–≤.
"""

import asyncio
import json
import httpx
import structlog
from typing import Optional

logger = structlog.get_logger()


class BaresipEventMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Baresip —á–µ—Ä–µ–∑ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∑–≤–æ–Ω–∫–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SIP —Å–æ–±—ã—Ç–∏–π.
    """
    
    def __init__(self, host: str = "localhost", port: int = 4444, api_base_url: str = "http://localhost:8000"):
        self.host = host
        self.port = port
        self.api_base_url = api_base_url
        self._running = False
        self._monitor_task = None
        self.reader: Optional[asyncio.StreamReader] = None
        self.writer: Optional[asyncio.StreamWriter] = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π Baresip"""
        if self._running:
            return
            
        self._running = True
        self._monitor_task = asyncio.create_task(self._monitor_loop())
        await logger.ainfo("üì° Baresip Event Monitor started - listening for SIP events")
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self._running = False
        if self._monitor_task:
            self._monitor_task.cancel()
            try:
                await self._monitor_task
            except asyncio.CancelledError:
                pass
                
        if self.writer:
            self.writer.close()
            await self.writer.wait_closed()
            
        await logger.ainfo("Baresip Event Monitor stopped")
        
    async def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Baresip"""
        try:
            self.reader, self.writer = await asyncio.open_connection(
                self.host, self.port
            )
            await logger.ainfo(f"Connected to Baresip at {self.host}:{self.port}")
            return True
        except Exception as e:
            await logger.aerror(f"Failed to connect to Baresip: {e}")
            return False
            
    async def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π"""
        while self._running:
            try:
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
                if not self.reader or not self.writer:
                    if not await self._connect():
                        await asyncio.sleep(5)
                        continue
                        
                # –ß–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è
                try:
                    data = await asyncio.wait_for(
                        self.reader.read(4096),
                        timeout=5.0
                    )
                    
                    if data:
                        await logger.debug(f"Received data from Baresip: {data[:200]}")
                        await self._process_data(data)
                    else:
                        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
                        await logger.awarning("Baresip connection closed, reconnecting...")
                        self.reader = None
                        self.writer = None
                        
                except asyncio.TimeoutError:
                    # –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    continue
                    
            except Exception as e:
                await logger.aerror(f"Baresip monitor error: {e}")
                await asyncio.sleep(1)
                
    async def _process_data(self, data: bytes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            response = data.decode('utf-8', errors='ignore')
            
            # –ü–∞—Ä—Å–∏–º netstring —Å–æ–±—ã—Ç–∏—è
            remaining = response
            
            while remaining and ':' in remaining:
                try:
                    colon_idx = remaining.index(':')
                    length_str = remaining[:colon_idx]
                    msg_length = int(length_str)
                    msg_start = colon_idx + 1
                    msg_end = msg_start + msg_length
                    
                    if msg_end <= len(remaining):
                        msg = remaining[msg_start:msg_end]
                        msg_json = json.loads(msg)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
                        if msg_json.get('event'):
                            await logger.debug(f"Parsed event: {msg_json}")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                        await self._handle_event(msg_json)
                        
                    if msg_end < len(remaining) and remaining[msg_end] == ',':
                        remaining = remaining[msg_end + 1:]
                    else:
                        break
                        
                except (ValueError, json.JSONDecodeError) as e:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    break
                    
        except Exception as e:
            await logger.aerror(f"Error processing Baresip data: {e}")
            
    async def _handle_event(self, event: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç Baresip"""
        if not event.get('event'):
            return
            
        event_type = event.get('type')
        event_class = event.get('class')
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if event_class == 'call':
            if event_type == 'CALL_ESTABLISHED':
                # –≠—Ç–æ SIP 200 OK - –∑–≤–æ–Ω–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!
                await logger.ainfo("üéâ CALL_ESTABLISHED - SIP 200 OK received!")
                await logger.ainfo(f"Event details: {event}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –Ω–∞ CONNECTED
                await self._update_active_call_status("connected")
                
            elif event_type == 'CALL_PROGRESS':
                # –≠—Ç–æ SIP 183 - —Ä–∞–Ω–Ω–∏–π –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫ (–æ–ø–µ—Ä–∞—Ç–æ—Ä)
                await logger.ainfo("üì¢ CALL_PROGRESS - SIP 183 Session Progress (early media)")
                
            elif event_type == 'CALL_RINGING':
                # –≠—Ç–æ SIP 180 - –∑–≤–æ–Ω–æ–∫ –∏–¥—ë—Ç
                await logger.ainfo("üîî CALL_RINGING - SIP 180 Ringing")
                
            elif event_type == 'CALL_CLOSED':
                await logger.ainfo(f"üìµ Call closed: {event.get('param')}")
                
            elif event_type == 'CALL_FAILED':
                await logger.ainfo(f"‚ùå Call failed: {event.get('param')}")
                
    async def _update_active_call_status(self, new_status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        try:
            async with httpx.AsyncClient() as client:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫
                response = await client.get(f"{self.api_base_url}/api/calls/active")
                if response.status_code == 200:
                    data = response.json()
                    call = data.get("call")
                    if call:
                        call_id = call.get("id")
                        await logger.ainfo(f"Updating call {call_id} status to {new_status}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        response = await client.patch(
                            f"{self.api_base_url}/api/calls/{call_id}/status",
                            params={"new_status": new_status}
                        )
                        
                        if response.status_code == 200:
                            await logger.ainfo(f"‚úÖ Call {call_id} status updated to {new_status}")
                        else:
                            await logger.aerror(f"Failed to update call status: {response.status_code}")
                            
        except Exception as e:
            await logger.aerror(f"Error updating call status: {e}")