"""
SIP Call Monitor - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SIP —Å–æ–±—ã—Ç–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.
–ü–æ–¥–∫–ª—é—á–∞–µ—Ç ElevenLabs WebSocket –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SIP 200 OK (—Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç).
"""

import asyncio
import httpx
import json
from typing import Optional
from datetime import datetime
import structlog

logger = structlog.get_logger()


class SIPCallMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä SIP —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ Baresip.
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç SIP —Å—Ç–∞—Ç—É—Å—ã –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ ElevenLabs.
    """
    
    def __init__(self, api_base_url: str = "http://localhost:8000"):
        self.api_base_url = api_base_url
        self._running = False
        self._monitor_task = None
        self._active_calls = {}  # call_id -> call_info
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self._running:
            return
            
        self._running = True
        self._monitor_task = asyncio.create_task(self._monitor_loop())
        await logger.ainfo("üéØ SIP Call Monitor started - will connect WebSocket only on SIP 200 OK")
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self._running = False
        if self._monitor_task:
            self._monitor_task.cancel()
            try:
                await self._monitor_task
            except asyncio.CancelledError:
                pass
        await logger.ainfo("SIP Call Monitor stopped")
        
    async def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        async with httpx.AsyncClient() as client:
            while self._running:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
                    response = await client.get(f"{self.api_base_url}/api/calls")
                    if response.status_code == 200:
                        data = response.json()
                        calls = data.get("calls", [])
                        
                        for call in calls:
                            await self._check_call_status(client, call)
                            
                except Exception as e:
                    await logger.aerror(f"SIP monitor error: {e}")
                    
                await asyncio.sleep(2)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
    async def _check_call_status(self, client: httpx.AsyncClient, call: dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞ –∏ SIP —Å–æ–±—ã—Ç–∏–π"""
        call_id = call.get("id")
        status = call.get("status")
        
        if not call_id or not status:
            return
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ dialing
        if status == "dialing":
            if call_id not in self._active_calls:
                self._active_calls[call_id] = {
                    "started_at": datetime.utcnow(),
                    "sip_status": None,
                    "websocket_connected": False
                }
                await logger.ainfo(f"üìû Tracking new call {call_id} - waiting for SIP response")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞
            call_info = self._active_calls[call_id]
            duration = (datetime.utcnow() - call_info["started_at"]).total_seconds()
            
            # –ï—Å–ª–∏ –∑–≤–æ–Ω–∏—Ç –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            if duration > 10 and not call_info.get("websocket_connected"):
                # –£–±–∏—Ä–∞–µ–º —Å–ø–∞–º –≤ –ª–æ–≥–∞—Ö - CallService —Å–∞–º —Ä–µ—à–∏—Ç –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∞—Ç—å WebSocket
                pass
                
                # –ü–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∞–µ–º (—É–≤–µ–ª–∏—á–∏–ª–∏ —Å 15 –¥–æ 30)
                if duration > 30:
                    await logger.awarning(f"‚ùå Hanging up call {call_id} - timeout, no real answer")
                    try:
                        response = await client.post(
                            f"{self.api_base_url}/api/calls/hangup",
                            params={"call_id": call_id}
                        )
                        if response.status_code == 200:
                            await logger.ainfo(f"‚úÖ Successfully hung up call {call_id}")
                            del self._active_calls[call_id]
                    except Exception as e:
                        await logger.aerror(f"Error hanging up call {call_id}: {e}")
                        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ connected - —ç—Ç–æ SIP 200 OK!
        elif status == "connected":
            if call_id in self._active_calls:
                call_info = self._active_calls[call_id]
                if not call_info.get("websocket_connected"):
                    await logger.ainfo(f"üéâ Call {call_id} CONNECTED - SIP 200 OK received!")
                    await logger.ainfo(f"üìû Real person answered the call!")
                    await logger.ainfo(f"üîå NOW connecting ElevenLabs WebSocket for call {call_id}")
                    
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è connect_elevenlabs —á–µ—Ä–µ–∑ CallService
                    # –ù–æ —Ç–∞–∫ –∫–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ API, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
                    await self._connect_websocket_for_call(client, call_id)
                    
                    call_info["websocket_connected"] = True
                    call_info["sip_status"] = "200 OK"
                    
        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        elif status in ["completed", "failed"]:
            if call_id in self._active_calls:
                await logger.ainfo(f"Call {call_id} ended with status: {status}")
                del self._active_calls[call_id]
                
    async def _connect_websocket_for_call(self, client: httpx.AsyncClient, call_id: str):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
            response = await client.post(
                f"{self.api_base_url}/api/calls/{call_id}/connect_elevenlabs"
            )
            
            if response.status_code == 200:
                await logger.ainfo(f"‚úÖ ElevenLabs WebSocket connected for call {call_id}")
            else:
                await logger.aerror(
                    f"Failed to connect WebSocket for call {call_id}: {response.status_code}"
                )
            
        except Exception as e:
            await logger.aerror(f"Failed to connect WebSocket for call {call_id}: {e}")